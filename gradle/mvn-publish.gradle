apply plugin: 'maven-publish'

repositories {
    mavenCentral()
}

group = GROUP_ID
version = VERSION_NAME
def _artifactId = POM_ARTIFACT_ID
ext.packaging = POM_PACKAGING

ext.mavenUrl = 'http://nexus.corp.kuaishou.com:88/nexus/content/repositories/releases/'
ext.pomFile = "${project.buildDir.getPath()}/publications/maven/pom-default.xml"
if (ext.packaging == 'aar') {
    ext.uploadFile = "${project.buildDir.getPath()}/outputs/aar/${project.name}-release.aar"
} else {
    ext.uploadFile = "${project.buildDir.getPath()}/libs/${project.name}-${version}.jar"
}
ext.sourcesFile = "${project.buildDir.getPath()}/libs/${project.name}-${version}-sources.jar"
ext.javadocFile = "${project.buildDir.getPath()}/libs/${project.name}-${version}-javadoc.jar"

task mavenUpload {
    doLast {
        try {
            exec {
                System.out.println("pom file = " + pomFile)
                commandLine "mvn", "deploy:deploy-file",
                        "-DpomFile=" + pomFile,
                        "-Dpackaging=" + packaging,
                        "-Durl=" + mavenUrl,
                        "-Dfile=" + uploadFile,
                        "-Dsources=" + sourcesFile,
                        "-Djavadoc=" + javadocFile,
                        "-DrepositoryId=kuaishou.releases"
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}


mavenUpload.dependsOn publishToMavenLocal

project.afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId = _artifactId
                def isAARPackaging = "aar" == "${project.ext.packaging}"

                if (isAARPackaging) {
                    task androidJavadocs(type: Javadoc) {
                        source = android.sourceSets.main.java.srcDirs
                        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
                        android.libraryVariants.all { variant ->
                            if (variant.name == 'release') {
                                owner.classpath += variant.javaCompile.classpath
                            }
                        }
                        failOnError false
                        exclude '**/R.html', '**/R.*.html', '**/index.html'
                    }

                    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
                        classifier = 'javadoc'
                        from androidJavadocs.destinationDir
                    }

                    task androidSourcesJar(type: Jar) {
                        classifier = 'sources'
                        from android.sourceSets.main.java.srcDirs
                    }

                    artifact bundleReleaseAar
                    artifact androidSourcesJar
                    artifact androidJavadocsJar
                } else {
                    from components.java
                    task javaJavadocsJar(type: Jar) {
                        javadoc.options.encoding = "UTF-8"
                        from javadoc
                        classifier = 'javadoc'
                    }

                    task javaSourcesJar(type: Jar) {
                        from sourceSets.main.allJava
                        classifier = 'sources'
                    }

                    artifact javaSourcesJar
                    artifact javaJavadocsJar
                }

                pom.withXml {
                    asNode().appendNode('build').appendNode("finalName", _artifactId)

                    final repository = asNode().appendNode('distributionManagement').appendNode('repository')
                    repository.appendNode("uniqueVersion", "false")
                    repository.appendNode("layout", "default")
                    repository.appendNode("id", "kuaishou.releases")
                    repository.appendNode("name", "Kuaishou")
                    repository.appendNode("url", "${project.ext.mavenUrl}")
                }
                if (isAARPackaging) {
                    pom.withXml {
                        final dependenciesNode = asNode().appendNode('dependencies')
                        ext.addDependency = { Dependency dep, String scope ->
                            if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") {
                                return // ignore invalid dependencies
                            }
                            final dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)
                            dependencyNode.appendNode('scope', scope)
                            if (!dep.transitive) {
                                // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                                final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                                exclusionNode.appendNode('groupId', '*')
                                exclusionNode.appendNode('artifactId', '*')
                            } else if (!dep.properties.excludeRules.empty) {
                                // Otherwise add specified exclude rules
                                final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                                dep.properties.excludeRules.each { ExcludeRule rule ->
                                    exclusionNode.appendNode('groupId', rule.group ?: '*')
                                    exclusionNode.appendNode('artifactId', rule.module ?: '*')
                                }
                            }
                        }
                        // List all "api" dependencies (for new Gradle) as "compile" dependencies
                        configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                        // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                        configurations.implementation.getAllDependencies().each { dep ->
                            Boolean dup = false
                            configurations.api.getAllDependencies().each { apiDep ->
                                if (apiDep.contentEquals(dep)) {
                                    dup = true
                                }
                            }

                            if (!dup) {
                                addDependency(dep, "runtime")
                            }

                        }
                    }
                }
            }
        }
        repositories {
            maven {
                url = "${project.ext.mavenUrl}"
            }
        }
    }
}
